---
layout: post
title: "Spring Security JWT"
date: 2019-09-06
categories:
tags: SpringSecurity JWT
---
<div style="display:none;">
어떻게 글을 짤까, Spring Security에 심화적인 부분 왜 JWT가 나왔는가에 대해 Oauth까지 설명
웹어플 로그인 요청 시, 프론트 엔드와 백엔드로 나뉘었을 때 문제점 기술
</div>
<h3>세션-쿠키</h3>
독자들은 Spring Security를 하면서 이런 의문이 들었을 것이다. 무엇을 근거로 이 아이디가 접속했다고 할 수 있을까? 그에 웹서버는 <b><a href="https://jeong-pro.tistory.com/80">세션-쿠키</a></b> 방식으로 사용하기에 알 수 있다라고 답할 수 있다. 좀 더 정확히 말하자면 서버는 클라이언트가 처음 접근할 때 세션ID를 발급해주고 클라이언트에서 쿠키를 사용해 저장한다. 이 다음 클라이언트가 서버에 접근할 때마다 쿠키를 이용하여 세션ID값을 전달함으로써 서버가 이 전에 접근했던 클라이언트임을 알 수 있는 것이다. 로그인 후에 로그인 정보를 서버와 클라이언트에 세션-쿠키 방식으로 저장함으로써 로그인을 유지 할 수 있는 것이다. 그래서 프로젝트 문제가 생긴다.
<br><br>
<h3>서버 분리 문제점</h3>
세션-쿠키 방식은 널리 쓰는 방식이며 전혀 문제가 없어보인다. 하지만 왜 문제가 있다고 말하는 것일까 독자들은 궁금할 것이다. 이 프로젝트는 백엔드 서버와 프론트엔드 서버로 두 서버를 나누기 때문에 문제가 생긴다. 프론트 서버에서 로그인 하게 되면 그 로그인의 정보는 클라이언트의 브라우저와 프론트 서버에 저장된다. 그럼 백엔드 서버는 로그인 했다는 것을 알 수 있을까? 당연히 알 수 없다. 그럼 어떻게 해야 이 문제를 해결 할 수 있을까? 그 해답은 바로 JWT에 있다.
<br><br>
<h3>JWT</h3>
<b><a href="https://velopert.com/2389">JWT(JSON Web Token)</a></b>을 간단하게 소개하자면 웹표준 (RFC 7519) 으로서 JSON 객체를 사용하여 가볍고 자가수용적인 방식으로 정보를 안전성 있게 전달할 수 있다. 가장 많이 쓰이는 방식을 바로 회원 인증인데 JWT에 자기수용적인 방식으로 회원의 정보를 가지고 있어 클라이언트가 요청 시 서버는 단지 전달받은 JWT가 유효한지 인증됐는지를 검증하기만 하면된다. 즉 토큰 방식으로 클라이언트를 인식한다는 것인데 이 방법의 가장 큰 장점은 서버에서 세션을 관리하지 않아 자원을 아낄 수 있다는 것이다. 또한 서버 간 유효성과 인증 검증 방식만 같다면 다중 서버를 운영하여도 문제가 없다. 이러한 점 때문에 이번 프로젝트에서 사용할려고 한다. 개인적으로는 독자들이 <b><a href="https://minwan1.github.io/2018/02/24/2018-02-24-OAuth/">Oauth</a></b>까지 무엇인지 알았으면 좋겠다. 대표적으로 JWT를 활용하는 보안 기술임은 물론 주변에서 흔히 볼 수 있는 Google로 로그인, Naver로 로그인, Kakao로 로그인이 가능하게 한 기술이기 때문이다.
<br><br>
<h3>JWT의 활용</h3>
이제 Spring Security에 JWT를 활용한 방식을 설명할려고 한다. 
<div style="display:none;">
</div>